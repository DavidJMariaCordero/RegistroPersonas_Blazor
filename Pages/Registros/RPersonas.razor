@page "/Personas"
@page "/Personas/{PersonaId:int}"

@inject IToastService toastService

    <EditForm Model="Persona" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card-header">
            <h2>Registro de Personas</h2>
        </div>

        <div class="card-body">
            <form>

                <div class="form-group">
                    <label for="PersonaId">PersonaId</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="Persona.PersonaId" class="form-control" />
                        <ValidationMessage For="@(() => Persona.PersonaId)" />
                        <div class="input-group-append">
                            <button type="button" class="btn btn-primary" @onclick="Buscar">    
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                                    </svg>Buscar
                            </button>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="Nombres">Nombres</label>
                    <div class="input-group">
                        <InputText @bind-Value="Persona.Nombres" class="form-control " />
                    </div>
                    <div><ValidationMessage For="@(() => Persona.Nombres)" /></div>
                </div>

                <div class="form-group">
                    <label for="Telefono">Telefono</label>
                    <div class="input-group">
                        <SfMaskedTextBox @bind-Value="Persona.Telefono" Mask="[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]" class="form-control" />
                        <ValidationMessage For="@(() => Persona.Telefono)" />
                    </div>
                </div>

                <div class="form-group">
                    <label for="Cedula">Cedula</label>
                    <div class="input-group">
                        <SfMaskedTextBox @bind-Value="Persona.Cedula" Mask="[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[0-9]" class="form-control" />
                        <ValidationMessage For="@(() => Persona.Cedula)" />
                    </div>
                </div>

                <div class="form-group">
                    <label for="Direccion">Direccion</label>
                    <div class="input-group">
                        <InputText @bind-Value="Persona.Direccion" class="form-control" />
                    </div>
                    <div><ValidationMessage For="@(() => Persona.Nombres)" /></div>
                </div>

                <div class="form-group">
                    <label for="FechaNacimiento">Fecha de Nacimiento</label>
                    <div class="input-group">
                        <InputDate id="fecha" @bind-Value="Persona.FechaNacimiento" class="form-control" />
                        <ValidationMessage For="@(() => Persona.FechaNacimiento)" />
                    </div>
                </div>

            </form>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Limpiar">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-file-earmark" viewBox="0 0 16 16">
                            <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z" />
                        </svg>Nuevo
                    </button>
                    
                    <button type="submit" class="btn btn-lg btn-success">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-save2" viewBox="0 0 16 16">
                            <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v4.5h2a.5.5 0 0 1 .354.854l-2.5 2.5a.5.5 0 0 1-.708 0l-2.5-2.5A.5.5 0 0 1 5.5 6.5h2V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z" />
                        </svg>Guardar
                    </button>
                    
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                        </svg>Eliminar
                    </button>

                </div>
            </div>

        </div>
    </EditForm>

    @code {

        [Parameter]
        public int PersonaId { get; set; }

        private Personas Persona = new Personas();
        //private string TipoSeleccionado = "0";
        //private string TelefonoSeleccionado;
        protected override void OnInitialized()
        {
            Limpiar(); //siempre se hace nuevo

            Buscar(); //solo hace efecto si se paso un id por parametro
        }
        private void Limpiar()
        {
            Persona = new Personas();
        }
        private void Buscar()
        {
            if (Persona.PersonaId > 0)
            {
                var encontrado = PersonasBLL.Buscar(Persona.PersonaId);

                if (encontrado != null)
                    this.Persona = encontrado;
                else
                    toastService.ShowWarning("No encontrado");
            }
        }

        public void Guardar()
        {
            bool guardo;

            guardo = PersonasBLL.Guardar(Persona);

            if (guardo)
            {
                Limpiar();
                toastService.ShowSuccess("Guardado correctamente");
            }
            else
                toastService.ShowError("No fue posible guardar");
        }

        public void Eliminar()
        {
            bool elimino;

            elimino = PersonasBLL.Eliminar(Persona.PersonaId);

            if (elimino)
            {
                Limpiar();
                toastService.ShowSuccess("Eliminado correctamente");
            }
            else
                toastService.ShowError("No fue posible eliminar");
        }

    }
